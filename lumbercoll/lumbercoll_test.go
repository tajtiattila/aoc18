package lumbercoll

import (
	"bytes"
	"strings"
	"testing"
)

func TestLumberColl(t *testing.T) {
	type test struct {
		nsim   int
		wanttc int
		wantlc int

		start string

		state []string
	}

	tests := []test{
		test{
			nsim:   10,
			wanttc: 37,
			wantlc: 31,
			start: `
.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.`,

			state: []string{
				`
.......##.
......|###
.|..|...#.
..|#||...#
..##||.|#|
...#||||..
||...|||..
|||||.||.|
||||||||||
....||..|.`,

				`
.......#..
......|#..
.|.|||....
..##|||..#
..###|||#|
...#|||||.
|||||||||.
||||||||||
||||||||||
.|||||||||`,

				`
.......#..
....|||#..
.|.||||...
..###|||.#
...##|||#|
.||##|||||
||||||||||
||||||||||
||||||||||
||||||||||`,

				`
.....|.#..
...||||#..
.|.#||||..
..###||||#
...###||#|
|||##|||||
||||||||||
||||||||||
||||||||||
||||||||||`,

				`
....|||#..
...||||#..
.|.##||||.
..####|||#
.|.###||#|
|||###||||
||||||||||
||||||||||
||||||||||
||||||||||`,

				`
...||||#..
...||||#..
.|.###|||.
..#.##|||#
|||#.##|#|
|||###||||
||||#|||||
||||||||||
||||||||||
||||||||||`,

				`
...||||#..
..||#|##..
.|.####||.
||#..##||#
||##.##|#|
|||####|||
|||###||||
||||||||||
||||||||||
||||||||||`,

				`
..||||##..
..|#####..
|||#####|.
||#...##|#
||##..###|
||##.###||
|||####|||
||||#|||||
||||||||||
||||||||||`,

				`
..||###...
.||#####..
||##...##.
||#....###
|##....##|
||##..###|
||######||
|||###||||
||||||||||
||||||||||`,

				`
.||##.....
||###.....
||##......
|##.....##
|##.....##
|##....##|
||##.####|
||#####|||
||||#|||||
||||||||||`,
			},
		},
	}

	varea := func(s string) []string {
		return strings.Split(strings.TrimSpace(s), "\n")
	}

	for _, tt := range tests {
		a, err := ParseArea(varea(tt.start))
		if err != nil {
			t.Fatal(err)
		}

		var buf bytes.Buffer
		for i := 0; i < tt.nsim; i++ {
			a.Step(1)

			a.Dump(&buf)
			t.Logf("step %v\n%v", i+1, buf.String())
			buf.Reset()
		}

		gottc, gotlc := a.TreeCount(), a.LumberyardCount()
		if gottc != tt.wanttc || gotlc != tt.wantlc {
			t.Fatalf("got tc=%d lc=%d; want tc=%d lc=%d", gottc, gotlc, tt.wanttc, tt.wantlc)
		}
	}
}
